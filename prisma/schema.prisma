generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  isBlocked    Boolean    @default(false)
  blockReason  String?
  password     String
  name         String?
  bio          String?
  avatarUrl    String?
  privacy      String?    // public, private, friends-only
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // –°—Ç—Ä–∏–∫–∏
  currentStreak  Int?
  longestStreak  Int?

  // –õ–∏—á–Ω—ã–µ —Ü–µ–ª–∏
  goals        Goal[]
  achievements AchievementOnUser[]
  feedEvents   FeedEvent[]
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
  friendsReqSent      Friendship[] @relation("friendsReqSent")
  friendsReqReceived  Friendship[] @relation("friendsReqReceived")
  
  // üÜï WORKSPACE: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏
  workspaceMemberships WorkspaceMember[]
  ownedTeamGoals       TeamGoal[] @relation("TeamGoalOwner")
  teamGoalContributions TeamGoalContributor[]
  teamGoalSteps        TeamGoalStep[]
  sentInvites          WorkspaceInvite[]
  workspaceMessages    WorkspaceMessage[]
  
  // –ñ–∞–ª–æ–±—ã
  reportsSent      Report[] @relation("reporter")
  reportsReceived  Report[] @relation("targetUser")
  
  events       Event[]
  aiMessages   AiMessage[]
  userPattern  UserPattern?
}

model Goal {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  title        String
  description  String?
  privacy      String?   // public, private, friends-only
  progressType String    // quantity, days, subtasks, duration
  targetValue  Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  completedAt  DateTime?
  sphere       String?

  isFlagged    Boolean  @default(false)
  flagReason   String?

  steps        Step[]
  subtasks     Subtask[]
  template     GoalTemplate? @relation(fields: [templateId], references: [id])
  templateId   Int?
  reports      Report[]
}

model Step {
  id        Int      @id @default(autoincrement())
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    Int
  isFlagged Boolean  @default(false)
  flagReason String?
  value     Int?
  note      String?
  createdAt DateTime @default(now())
}

model Subtask {
  id        Int      @id @default(autoincrement())
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    Int
  isFlagged Boolean  @default(false)
  flagReason String?
  title     String
  completed Boolean  @default(false)
}

model GoalTemplate {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  category    String
  goals       Goal[]
}

model Achievement {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  title       String
  description String
  iconUrl     String?
  type        String
  requirement Json?
  users       AchievementOnUser[]
}

model AchievementOnUser {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [userId], references: [id])
  userId          Int
  achievement     Achievement  @relation(fields: [achievementId], references: [id])
  achievementId   Int
  achievedAt      DateTime     @default(now())
  progress        Int?
}

model FeedEvent {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  data      Json?
  createdAt DateTime @default(now())
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requester   User     @relation("friendsReqSent", fields: [requesterId], references: [id])
  requesterId Int
  addressee   User     @relation("friendsReqReceived", fields: [addresseeId], references: [id])
  addresseeId Int
  status      String   // pending, accepted, rejected
  createdAt   DateTime @default(now())
}

model Event {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  eventType     String
  occurredAt    DateTime  @default(now())
  payload       Json?
  clientEventId String?
  source        String?
  sphere        String?
  goalId        Int?
  stepId        Int?
  createdAt     DateTime  @default(now())
}

// ==========================================
// üÜï WORKSPACE MODELS (B2B)
// ==========================================

model Workspace {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  plan        String    @default("free") // free, team, enterprise
  settings    Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  members     WorkspaceMember[]
  teamGoals   TeamGoal[]
  messages    WorkspaceMessage[]
  invites     WorkspaceInvite[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          Int       @id @default(autoincrement())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int       @map("workspace_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  role        String    // member, manager, admin, owner
  position    String?   // –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  joinedAt    DateTime  @default(now()) @map("joined_at")

  @@unique([workspaceId, userId])
  @@index([userId])
  @@map("workspace_members")
}

model TeamGoal {
  id          Int       @id @default(autoincrement())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int       @map("workspace_id")
  title       String
  description String?
  targetValue Int       @map("target_value")
  category    String?
  owner       User?     @relation("TeamGoalOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId     Int?      @map("owner_id")
  visibility  String    @default("workspace") // workspace, team, private
  status      String    @default("active") // active, completed, archived
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  contributors TeamGoalContributor[]
  steps        TeamGoalStep[]

  @@index([workspaceId])
  @@index([ownerId])
  @@map("team_goals")
}

model TeamGoalContributor {
  id           Int       @id @default(autoincrement())
  teamGoal     TeamGoal  @relation(fields: [teamGoalId], references: [id], onDelete: Cascade)
  teamGoalId   Int       @map("team_goal_id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int       @map("user_id")
  contribution Int       @default(0)

  @@unique([teamGoalId, userId])
  @@index([userId])
  @@map("team_goal_contributors")
}

model TeamGoalStep {
  id         Int       @id @default(autoincrement())
  teamGoal   TeamGoal  @relation(fields: [teamGoalId], references: [id], onDelete: Cascade)
  teamGoalId Int       @map("team_goal_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int       @map("user_id")
  value      Int
  note       String?
  createdAt  DateTime  @default(now()) @map("created_at")

  @@index([teamGoalId])
  @@index([userId])
  @@map("team_goal_steps")
}

model WorkspaceInvite {
  id          Int       @id @default(autoincrement())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int       @map("workspace_id")
  email       String
  role        String    @default("member")
  token       String    @unique
  inviter     User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedBy   Int       @map("invited_by")
  expiresAt   DateTime  @map("expires_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([email])
  @@index([token])
  @@map("workspace_invites")
}

model WorkspaceMessage {
  id          Int       @id @default(autoincrement())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int       @map("workspace_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  text        String
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([workspaceId])
  @@map("workspace_messages")
}

// ==========================================
// –°–¢–ê–†–´–ï –ú–û–î–ï–õ–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∫–∞)
// ==========================================

// –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å Group, GroupMember, GroupGoal, GroupGoalProgress, GroupMessage
// –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

model Report {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  reporter      User     @relation("reporter", fields: [reporterId], references: [id])
  reporterId    Int
  targetUser    User?    @relation("targetUser", fields: [targetUserId], references: [id])
  targetUserId  Int?
  targetGoal    Goal?    @relation(fields: [targetGoalId], references: [id])
  targetGoalId  Int?
  reason        String
  status        String
  decision      String?
}

model AiMessage {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @db.VarChar(50)
  priority  Int      @default(3)
  message   String   @db.Text
  emoji     String?  @db.VarChar(10)
  metadata  Json     @default("{}")
  shown     Boolean  @default(false)
  dismissed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, shown, dismissed])
  @@index([userId, priority, createdAt])
  @@map("ai_messages")
}

model UserPattern {
  userId           Int      @id @map("user_id")
  streak           Int      @default(0)
  longestStreak    Int      @default(0) @map("longest_streak")
  avgStepsPerDay   Float    @default(0) @map("avg_steps_per_day")
  mostActiveDay    String?  @map("most_active_day") @db.VarChar(20)
  mostActiveHour   Int?     @map("most_active_hour")
  completionRate   Float    @default(0) @map("completion_rate")
  totalGoals       Int      @default(0) @map("total_goals")
  activeGoals      Int      @default(0) @map("active_goals")
  completedGoals   Int      @default(0) @map("completed_goals")
  lastCalculated   DateTime @default(now()) @map("last_calculated")
  data             Json     @default("{}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_patterns")
}

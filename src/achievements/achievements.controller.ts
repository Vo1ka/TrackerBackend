// src/achievements/achievements.controller.ts

import { Controller, Get, UseGuards, Req, Param, Query } from '@nestjs/common';
import { AchievementsService } from './achievements.service';
import { JwtAuthGuard } from 'src/auth/jwt-auth.guard';

@Controller('achievements')
@UseGuards(JwtAuthGuard)
export class AchievementsController {
  constructor(private achievementsService: AchievementsService) {}

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ unlocked)
  @Get()
  async getUserAchievements(@Req() req) {
    console.log('üèÜ GET /achievements - userId:', req.user.id);
    const achievements = await this.achievementsService.getUserAchievements(req.user.id);
    console.log('üìä Found achievements:', achievements.length);
    return achievements;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (unlocked + locked)
  @Get('all')
  async getAllAchievements(@Req() req) {
    console.log('üèÜ GET /achievements/all - userId:', req.user.id);
    const result = await this.achievementsService.getAllAchievements(req.user.id);
    console.log('üìä Unlocked:', result.unlocked.length, 'Locked:', result.locked.length);
    return result;
  }

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  @Get('user/:userId')
  async getAchievementsByUserId(@Req() req, @Param('userId') userId: string) {
    console.log('üèÜ GET /achievements/user/:userId - targetUserId:', userId);
    return this.achievementsService.getUserAchievements(+userId);
  }
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  @Get('stats')
  async getStats(@Req() req) {
    return this.achievementsService.getUserAchievementStats(req.user.id);
  }

  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  @Get('recent')
  async getRecent(@Req() req, @Query('limit') limit?: string) {
    return this.achievementsService.getRecentAchievements(
      req.user.id,
      limit ? parseInt(limit) : 5,
    );
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  @Get(':achievementId/progress')
  async getProgress(
    @Req() req,
    @Param('achievementId') achievementId: string,
  ) {
    const progress = await this.achievementsService.getAchievementProgress(
      req.user.id,
      +achievementId,
    );
    return { progress };
  }

}

import { Injectable, HttpException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios, { AxiosInstance } from 'axios';
import * as https from 'https';
import * as qs from 'qs';
import { v4 as uuidv4 } from 'uuid'; 


interface GigaChatAuthResponse {
  access_token: string;
  expires_at: number;
}

interface GigaChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface GigaChatRequest {
  model: string;
  messages: GigaChatMessage[];
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
}

interface GigaChatResponse {
  choices: Array<{
    message: {
      role: string;
      content: string;
    };
    index: number;
    finish_reason: string;
  }>;
  created: number;
  model: string;
  object: string;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

@Injectable()
export class GigaChatService {
  private readonly authUrl = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
  private readonly apiUrl = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions';
  
  private readonly authKey: string;
  private readonly scope: string;
  private readonly model: string;
  private readonly axiosInstance: AxiosInstance;

  private accessToken: string | null = null;
  private tokenExpiresAt: number = 0;

  constructor(private configService: ConfigService) {
    this.authKey = this.configService.get<string>('GIGACHAT_AUTH_KEY')!;
    this.scope = this.configService.get<string>('GIGACHAT_SCOPE', 'GIGACHAT_API_PERS');
    this.model = this.configService.get<string>('GIGACHAT_MODEL', 'GigaChat');

    if (!this.authKey) {
      throw new Error('GigaChat AUTH_KEY not configured');
    }

    // –°–æ–∑–¥–∞—ë–º axios instance —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
    console.warn('‚ö†Ô∏è  Development mode: Certificate verification disabled');
    this.axiosInstance = axios.create({
      httpsAgent: new https.Agent({
        rejectUnauthorized: false,
      }),
      timeout: 30000,
    });
  }

  private async getAccessToken(): Promise<string> {
    if (this.accessToken && Date.now() < this.tokenExpiresAt) {
      console.log('‚úÖ Using cached access token');
      return this.accessToken;
    }

    try {
      console.log('üîë Requesting new access token...');
      
      const rquid = this.generateRqUID();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º qs.stringify –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
      const data = qs.stringify({
        scope: this.scope,
      });

      console.log('   RqUID:', rquid);
      console.log('   Scope:', this.scope);
      console.log('   Data:', data);

      const response = await this.axiosInstance.post(
        this.authUrl,
        data,
        {
          headers: {
            'RqUID': rquid,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${this.authKey}`,
          },
        }
      );

      console.log('üì° Auth response status:', response.status);

      const responseData: GigaChatAuthResponse = response.data;
      
      this.accessToken = responseData.access_token;
      this.tokenExpiresAt = responseData.expires_at;

      console.log('‚úÖ GigaChat access token obtained');
      console.log('   Token (first 30 chars):', this.accessToken.substring(0, 30) + '...');
      console.log('   Expires at:', new Date(this.tokenExpiresAt).toISOString());
      
      return this.accessToken;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error('‚ùå Axios error details:', {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
          headers: error.response?.headers,
        });
        throw new HttpException(
          `GigaChat auth error: ${error.response?.status} - ${JSON.stringify(error.response?.data)}`,
          error.response?.status || 500
        );
      }
      console.error('‚ùå GigaChat authentication error:', error);
      throw new HttpException('Failed to authenticate with GigaChat', 500);
    }
  }

   private generateRqUID(): string {
    return uuidv4(); // ‚¨ÖÔ∏è FIX: –∏—Å–ø–æ–ª—å–∑—É–µ–º UUID4
  }

  async generateCompletion(
    systemPrompt: string,
    userPrompt: string,
    temperature: number = 0.6,
    maxTokens: number = 200
  ): Promise<string> {
    const accessToken = await this.getAccessToken();

    const requestBody: GigaChatRequest = {
      model: this.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: userPrompt,
        },
      ],
      temperature,
      max_tokens: maxTokens,
      top_p: 0.9,
    };

    try {
      const response = await this.axiosInstance.post(
        this.apiUrl,
        requestBody,
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Bearer ${accessToken}`,
          },
        }
      );

      const data: GigaChatResponse = response.data;

      if (!data.choices?.[0]?.message?.content) {
        throw new HttpException('Invalid response from GigaChat', 500);
      }

      console.log(`‚úÖ GigaChat response generated (${data.usage.total_tokens} tokens)`);
      return data.choices[0].message.content.trim();
    } catch (error) {
      if (axios.isAxiosError(error)) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        if (error.response?.status === 401) {
          this.accessToken = null;
          return this.generateCompletion(systemPrompt, userPrompt, temperature, maxTokens);
        }

        console.error('‚ùå GigaChat API error:', {
          status: error.response?.status,
          data: error.response?.data,
        });
        throw new HttpException(
          `GigaChat API error: ${error.response?.status} - ${JSON.stringify(error.response?.data)}`,
          error.response?.status || 500
        );
      }
      console.error('‚ùå GigaChat API error:', error);
      throw new HttpException('Failed to generate AI response', 500);
    }
  }

  async generateMotivation(context: string): Promise<string> {
    const systemPrompt = `–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π LevelUp.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –Ω–µ –∏–Ω—Ñ–∞–Ω—Ç–∏–ª—å–Ω—ã–π —Ç–æ–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ (1-2 –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –§–æ–∫—É—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö, –∞ –Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞—Ö`;

    return this.generateCompletion(systemPrompt, context, 0.7, 150);
  }

  async generateInsight(context: string): Promise<string> {
    const systemPrompt = `–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ LevelUp.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
-–î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
- –ù–∞—á–∏–Ω–∞–π —Å "–ó–∞–º–µ—Ç–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:", "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:"
- –§–æ–∫—É—Å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–∫—Ç–∞—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üìä üìà üí°`;

    return this.generateCompletion(systemPrompt, context, 0.5, 150);
  }

  async generateCelebration(context: string): Promise<string> {
    const systemPrompt = `–¢—ã ‚Äî —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ LevelUp.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –î–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
- –í–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ —á—Ä–µ–∑–º–µ—Ä–Ω—ã–π —Ç–æ–Ω
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
- –ú–æ—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üéâ üî• üéØ ‚≠ê`;

    return this.generateCompletion(systemPrompt, context, 0.8, 150);
  }

  async generateRecommendation(context: string): Promise<string> {
    const systemPrompt = `–¢—ã ‚Äî –º—É–¥—Ä—ã–π AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ LevelUp.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –û–±—ä—è—Å–Ω–∏ "–ø–æ—á–µ–º—É" –∏ "–∫–∞–∫"
- –¢–æ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, –∞ –Ω–µ –∫—Ä–∏—Ç–∏–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üí° ü§î ‚ú®`;

    return this.generateCompletion(systemPrompt, context, 0.6, 150);
  }

  async generateChallenge(context: string): Promise<string> {
    const systemPrompt = `–¢—ã ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π AI-—Ç—Ä–µ–Ω–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ LevelUp.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
- –§–æ—Ä–º—É–ª–∏—Ä—É–π –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–∑–æ–≤
- –£–∫–∞–∑—ã–≤–∞–π –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üèÜ ‚ö° üéØ üí™`;

    return this.generateCompletion(systemPrompt, context, 0.7, 150);
  }
}
